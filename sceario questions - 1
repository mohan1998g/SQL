Sure! Below are some common scenario-based MySQL interview questions. These types of questions test your ability to apply MySQL concepts in real-world scenarios, focusing on problem-solving, query optimization, database design, and more.

1. Basic CRUD (Create, Read, Update, Delete) Operations
Scenario: You are managing an employee database with fields like employee_id, name, salary, and department_id. How would you:

Insert new employee data?
Retrieve all employees who earn more than $50,000?
Update the salary of a specific employee?
Delete an employee record?
Possible Answers:

Insert:
 
INSERT INTO employees (employee_id, name, salary, department_id) 
VALUES (1001, 'John Doe', 55000, 2);
Retrieve:
 
SELECT * FROM employees WHERE salary > 50000;
Update:
 
UPDATE employees SET salary = 60000 WHERE employee_id = 1001;
Delete:
 
DELETE FROM employees WHERE employee_id = 1001;
2. Joining Tables
Scenario: You have two tables, employees and departments. The employees table has a department_id, and the departments table has department_id and department_name. Write a query to display each employee’s name along with their department name.

Possible Answer:

 
SELECT e.name, d.department_name 
FROM employees e
JOIN departments d ON e.department_id = d.department_id;
3. Optimizing a Query
Scenario: A query to fetch data is running too slow. The query is as follows:

 
SELECT * FROM orders WHERE customer_id = 12345 AND order_date = '2024-01-01';
What are some ways to optimize this query?

Possible Answer:

Create indexes on columns that are frequently used in WHERE clauses:
 
CREATE INDEX idx_customer_order ON orders(customer_id, order_date);
Avoid using SELECT *; only select required columns:
 
SELECT order_id, product_name, quantity FROM orders WHERE customer_id = 12345 AND order_date = '2024-01-01';
Check query execution plan with EXPLAIN:
 
EXPLAIN SELECT order_id, product_name FROM orders WHERE customer_id = 12345 AND order_date = '2024-01-01';
4. Handling NULL Values
Scenario: You have a table where some columns have NULL values. How would you retrieve rows where a particular column is either NULL or has a specific value?

Possible Answer:

 
SELECT * FROM employees WHERE department_id IS NULL OR department_id = 2;
5. Group By and Aggregation
Scenario: You need to generate a report that shows the total number of employees and the average salary in each department.

Possible Answer:

 
SELECT department_id, COUNT(*) AS total_employees, AVG(salary) AS average_salary
FROM employees
GROUP BY department_id;
6. Preventing Duplicate Entries
Scenario: How would you ensure that no duplicate entries are made for an employee’s email in the employees table?

Possible Answer:

Create a unique constraint on the email column:
 
ALTER TABLE employees ADD CONSTRAINT unique_email UNIQUE (email);
7. Database Design for Relationships
Scenario: You are designing a database for a school. Each student can enroll in multiple courses, and each course can have multiple students. How would you design the schema for these tables?

Possible Answer:

Students table:
 
CREATE TABLE students (
    student_id INT PRIMARY KEY,
    name VARCHAR(100)
);
Courses table:
 
CREATE TABLE courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(100)
);
Enrollment (Many-to-Many Relationship):
 
CREATE TABLE enrollments (
    student_id INT,
    course_id INT,
    PRIMARY KEY (student_id, course_id),
    FOREIGN KEY (student_id) REFERENCES students(student_id),
    FOREIGN KEY (course_id) REFERENCES courses(course_id)
);
8. Finding Duplicates
Scenario: How would you write a query to find duplicate email addresses in the users table?

Possible Answer:

 
SELECT email, COUNT(*) AS occurrences
FROM users
GROUP BY email
HAVING COUNT(*) > 1;
9. Handling Transactions
Scenario: You need to transfer money between two bank accounts. Both the debit and credit operations must either succeed or fail together. How would you handle this using transactions?

Possible Answer:

 
START TRANSACTION;

UPDATE accounts SET balance = balance - 100 WHERE account_id = 1; -- debit
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2; -- credit

COMMIT;  -- If both succeed, commit the transaction

-- If any error occurs, ROLLBACK to undo changes:
ROLLBACK;
10. Subqueries
Scenario: Write a query to find the employees who earn more than the average salary in their department.

Possible Answer:

 
SELECT name 
FROM employees e
WHERE salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id);
11. Pagination
Scenario: You are tasked with displaying employees in a paginated fashion, showing 10 records per page. How would you write a query for the second page of results?

Possible Answer:

 
SELECT * 
FROM employees 
LIMIT 10 OFFSET 10;  -- First page is OFFSET 0, second page is OFFSET 10 (10 records per page)
12. Foreign Key Constraint
Scenario: How would you add a foreign key constraint to ensure that department_id in the employees table references a valid department_id from the departments table?

Possible Answer:

 
ALTER TABLE employees 
ADD CONSTRAINT fk_department 
FOREIGN KEY (department_id) REFERENCES departments(department_id);
13. Working with Dates
Scenario: You need to retrieve all employees who joined in the last 30 days. How would you write this query?

Possible Answer:

 
SELECT * FROM employees 
WHERE join_date >= CURDATE() - INTERVAL 30 DAY;
14. Views
Scenario: You want to create a view that shows the name and salary of all employees from the employees table whose salary is above $50,000.

Possible Answer:

 
CREATE VIEW high_earners AS 
SELECT name, salary 
FROM employees 
WHERE salary > 50000;
15. Union vs Union All
Scenario: What is the difference between UNION and UNION ALL in MySQL? How would you use them in practice?

Possible Answer:

UNION removes duplicates, while UNION ALL keeps all records (including duplicates).

Example:

 
SELECT name FROM employees_2023
UNION
SELECT name FROM employees_2024;  -- Removes duplicate names
 
SELECT name FROM employees_2023
UNION ALL
SELECT name FROM employees_2024;  -- Keeps duplicates
16. Handling Deadlocks
Scenario: How would you handle a deadlock situation in MySQL when multiple transactions are stuck waiting for each other to release locks?

Possible Answer:

Enable MySQL’s automatic deadlock detection.
Use appropriate transaction isolation levels (e.g., READ COMMITTED) to reduce deadlock risk.
Use LOCK IN SHARE MODE or FOR UPDATE carefully to avoid locking conflicts.
Detect and handle deadlocks programmatically using a TRY-CATCH block in your application.
These scenario-based questions test your practical understanding of MySQL and how you approach real-world database problems. 
Practicing such questions can enhance your SQL skills and prepare you for interviews.
